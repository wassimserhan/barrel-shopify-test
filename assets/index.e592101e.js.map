{"version":3,"file":"index.e592101e.js","sources":["../node_modules/.pnpm/nanoajax@0.4.3/node_modules/nanoajax/index.js"],"sourcesContent":["// Best place to find information on XHR features is:\n// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n\nvar reqfields = [\n  'responseType', 'withCredentials', 'timeout', 'onprogress'\n]\n\n// Simple and small ajax function\n// Takes a parameters object and a callback function\n// Parameters:\n//  - url: string, required\n//  - headers: object of `{header_name: header_value, ...}`\n//  - body:\n//      + string (sets content type to 'application/x-www-form-urlencoded' if not set in headers)\n//      + FormData (doesn't set content type so that browser will set as appropriate)\n//  - method: 'GET', 'POST', etc. Defaults to 'GET' or 'POST' based on body\n//  - cors: If your using cross-origin, you will need this true for IE8-9\n//\n// The following parameters are passed onto the xhr object.\n// IMPORTANT NOTE: The caller is responsible for compatibility checking.\n//  - responseType: string, various compatability, see xhr docs for enum options\n//  - withCredentials: boolean, IE10+, CORS only\n//  - timeout: long, ms timeout, IE8+\n//  - onprogress: callback, IE10+\n//\n// Callback function prototype:\n//  - statusCode from request\n//  - response\n//    + if responseType set and supported by browser, this is an object of some type (see docs)\n//    + otherwise if request completed, this is the string text of the response\n//    + if request is aborted, this is \"Abort\"\n//    + if request times out, this is \"Timeout\"\n//    + if request errors before completing (probably a CORS issue), this is \"Error\"\n//  - request object\n//\n// Returns the request object. So you can call .abort() or other methods\n//\n// DEPRECATIONS:\n//  - Passing a string instead of the params object has been removed!\n//\nexports.ajax = function (params, callback) {\n  // Any variable used more than once is var'd here because\n  // minification will munge the variables whereas it can't munge\n  // the object access.\n  var headers = params.headers || {}\n    , body = params.body\n    , method = params.method || (body ? 'POST' : 'GET')\n    , called = false\n\n  var req = getRequest(params.cors)\n\n  function cb(statusCode, responseText) {\n    return function () {\n      if (!called) {\n        callback(req.status === undefined ? statusCode : req.status,\n                 req.status === 0 ? \"Error\" : (req.response || req.responseText || responseText),\n                 req)\n        called = true\n      }\n    }\n  }\n\n  req.open(method, params.url, true)\n\n  var success = req.onload = cb(200)\n  req.onreadystatechange = function () {\n    if (req.readyState === 4) success()\n  }\n  req.onerror = cb(null, 'Error')\n  req.ontimeout = cb(null, 'Timeout')\n  req.onabort = cb(null, 'Abort')\n\n  if (body) {\n    setDefault(headers, 'X-Requested-With', 'XMLHttpRequest')\n\n    if (!global.FormData || !(body instanceof global.FormData)) {\n      setDefault(headers, 'Content-Type', 'application/x-www-form-urlencoded')\n    }\n  }\n\n  for (var i = 0, len = reqfields.length, field; i < len; i++) {\n    field = reqfields[i]\n    if (params[field] !== undefined)\n      req[field] = params[field]\n  }\n\n  for (var field in headers)\n    req.setRequestHeader(field, headers[field])\n\n  req.send(body)\n\n  return req\n}\n\nfunction getRequest(cors) {\n  // XDomainRequest is only way to do CORS in IE 8 and 9\n  // But XDomainRequest isn't standards-compatible\n  // Notably, it doesn't allow cookies to be sent or set by servers\n  // IE 10+ is standards-compatible in its XMLHttpRequest\n  // but IE 10 can still have an XDomainRequest object, so we don't want to use it\n  if (cors && global.XDomainRequest && !/MSIE 1/.test(navigator.userAgent))\n    return new XDomainRequest\n  if (global.XMLHttpRequest)\n    return new XMLHttpRequest\n}\n\nfunction setDefault(obj, key, value) {\n  obj[key] = obj[key] || value\n}\n"],"names":["reqfields","nanoajax","params","callback","headers","body","method","called","req","getRequest","cb","statusCode","responseText","success","setDefault","global","len","field","cors","obj","key","value"],"mappings":"4DAGIA,EAAY,CACd,eAAgB,kBAAmB,UAAW,YAChD,EAmCAC,EAAA,KAAe,SAAUC,EAAQC,EAAU,CAIzC,IAAIC,EAAUF,EAAO,SAAW,CAAE,EAC9BG,EAAOH,EAAO,KACdI,EAASJ,EAAO,SAAWG,EAAO,OAAS,OAC3CE,EAAS,GAETC,EAAMC,EAAWP,EAAO,IAAI,EAEhC,SAASQ,EAAGC,EAAYC,EAAc,CACpC,OAAO,UAAY,CACZL,IACHJ,EAASK,EAAI,SAAW,OAAYG,EAAaH,EAAI,OAC5CA,EAAI,SAAW,EAAI,QAAWA,EAAI,UAAYA,EAAI,cAAgBI,EAClEJ,CAAG,EACZD,EAAS,GAEZ,CACF,CAEDC,EAAI,KAAKF,EAAQJ,EAAO,IAAK,EAAI,EAEjC,IAAIW,EAAUL,EAAI,OAASE,EAAG,GAAG,EACjCF,EAAI,mBAAqB,UAAY,CAC/BA,EAAI,aAAe,GAAGK,EAAS,CACpC,EACDL,EAAI,QAAUE,EAAG,KAAM,OAAO,EAC9BF,EAAI,UAAYE,EAAG,KAAM,SAAS,EAClCF,EAAI,QAAUE,EAAG,KAAM,OAAO,EAE1BL,IACFS,EAAWV,EAAS,mBAAoB,gBAAgB,GAEpD,CAACW,EAAO,UAAY,EAAEV,aAAgBU,EAAO,YAC/CD,EAAWV,EAAS,eAAgB,mCAAmC,GAI3E,QAAS,EAAI,EAAGY,EAAMhB,EAAU,OAAQiB,EAAO,EAAID,EAAK,IACtDC,EAAQjB,EAAU,CAAC,EACfE,EAAOe,CAAK,IAAM,SACpBT,EAAIS,CAAK,EAAIf,EAAOe,CAAK,GAG7B,QAASA,KAASb,EAChBI,EAAI,iBAAiBS,EAAOb,EAAQa,CAAK,CAAC,EAE5C,OAAAT,EAAI,KAAKH,CAAI,EAENG,CACT,EAEA,SAASC,EAAWS,EAAM,CAMxB,GAAIA,GAAQH,EAAO,gBAAkB,CAAC,SAAS,KAAK,UAAU,SAAS,EACrE,OAAO,IAAI,eACb,GAAIA,EAAO,eACT,OAAO,IAAI,cACf,CAEA,SAASD,EAAWK,EAAKC,EAAKC,EAAO,CACnCF,EAAIC,CAAG,EAAID,EAAIC,CAAG,GAAKC,CACzB","x_google_ignoreList":[0]}